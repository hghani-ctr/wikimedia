{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d937f634-0df6-418e-9f64-59095f90364c",
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: './resources/data/regional_reader_metrics.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[1], line 233\u001b[0m\n\u001b[1;32m    230\u001b[0m     chart\u001b[38;5;241m.\u001b[39mfinalize_plot(save_file_name,display\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m    232\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;18m__name__\u001b[39m \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m__main__\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m--> 233\u001b[0m     \u001b[43mmain\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
      "Cell \u001b[0;32mIn[1], line 47\u001b[0m, in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     44\u001b[0m region_table[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcentroid\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m region_table[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mgeometry\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mapply(\u001b[38;5;28;01mlambda\u001b[39;00m g: g\u001b[38;5;241m.\u001b[39mcentroid)\n\u001b[1;32m     46\u001b[0m \u001b[38;5;66;03m#---READER DATA---\u001b[39;00m\n\u001b[0;32m---> 47\u001b[0m reader_df \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread_csv\u001b[49m\u001b[43m(\u001b[49m\u001b[43mhome_dir\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m/resources/data/regional_reader_metrics.csv\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     48\u001b[0m reader_df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmonth\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mto_datetime(reader_df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmonth\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[1;32m     49\u001b[0m reader_df \u001b[38;5;241m=\u001b[39m reader_df\u001b[38;5;241m.\u001b[39msort_values(by\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmonth\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "File \u001b[0;32m~/.conda/envs/2024-03-04T23.26.17_hghani/lib/python3.10/site-packages/pandas/util/_decorators.py:311\u001b[0m, in \u001b[0;36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    305\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(args) \u001b[38;5;241m>\u001b[39m num_allow_args:\n\u001b[1;32m    306\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[1;32m    307\u001b[0m         msg\u001b[38;5;241m.\u001b[39mformat(arguments\u001b[38;5;241m=\u001b[39marguments),\n\u001b[1;32m    308\u001b[0m         \u001b[38;5;167;01mFutureWarning\u001b[39;00m,\n\u001b[1;32m    309\u001b[0m         stacklevel\u001b[38;5;241m=\u001b[39mstacklevel,\n\u001b[1;32m    310\u001b[0m     )\n\u001b[0;32m--> 311\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/.conda/envs/2024-03-04T23.26.17_hghani/lib/python3.10/site-packages/pandas/io/parsers/readers.py:680\u001b[0m, in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    665\u001b[0m kwds_defaults \u001b[38;5;241m=\u001b[39m _refine_defaults_read(\n\u001b[1;32m    666\u001b[0m     dialect,\n\u001b[1;32m    667\u001b[0m     delimiter,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    676\u001b[0m     defaults\u001b[38;5;241m=\u001b[39m{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdelimiter\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m,\u001b[39m\u001b[38;5;124m\"\u001b[39m},\n\u001b[1;32m    677\u001b[0m )\n\u001b[1;32m    678\u001b[0m kwds\u001b[38;5;241m.\u001b[39mupdate(kwds_defaults)\n\u001b[0;32m--> 680\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_read\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilepath_or_buffer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/.conda/envs/2024-03-04T23.26.17_hghani/lib/python3.10/site-packages/pandas/io/parsers/readers.py:575\u001b[0m, in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    572\u001b[0m _validate_names(kwds\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnames\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m))\n\u001b[1;32m    574\u001b[0m \u001b[38;5;66;03m# Create the parser.\u001b[39;00m\n\u001b[0;32m--> 575\u001b[0m parser \u001b[38;5;241m=\u001b[39m \u001b[43mTextFileReader\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilepath_or_buffer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    577\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m chunksize \u001b[38;5;129;01mor\u001b[39;00m iterator:\n\u001b[1;32m    578\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m parser\n",
      "File \u001b[0;32m~/.conda/envs/2024-03-04T23.26.17_hghani/lib/python3.10/site-packages/pandas/io/parsers/readers.py:934\u001b[0m, in \u001b[0;36mTextFileReader.__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    931\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhas_index_names\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m kwds[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhas_index_names\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[1;32m    933\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles: IOHandles \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m--> 934\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_make_engine\u001b[49m\u001b[43m(\u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mengine\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/.conda/envs/2024-03-04T23.26.17_hghani/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1218\u001b[0m, in \u001b[0;36mTextFileReader._make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1214\u001b[0m     mode \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mrb\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1215\u001b[0m \u001b[38;5;66;03m# error: No overload variant of \"get_handle\" matches argument types\u001b[39;00m\n\u001b[1;32m   1216\u001b[0m \u001b[38;5;66;03m# \"Union[str, PathLike[str], ReadCsvBuffer[bytes], ReadCsvBuffer[str]]\"\u001b[39;00m\n\u001b[1;32m   1217\u001b[0m \u001b[38;5;66;03m# , \"str\", \"bool\", \"Any\", \"Any\", \"Any\", \"Any\", \"Any\"\u001b[39;00m\n\u001b[0;32m-> 1218\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles \u001b[38;5;241m=\u001b[39m \u001b[43mget_handle\u001b[49m\u001b[43m(\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# type: ignore[call-overload]\u001b[39;49;00m\n\u001b[1;32m   1219\u001b[0m \u001b[43m    \u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1220\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1221\u001b[0m \u001b[43m    \u001b[49m\u001b[43mencoding\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mencoding\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1222\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcompression\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcompression\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1223\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmemory_map\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mmemory_map\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1224\u001b[0m \u001b[43m    \u001b[49m\u001b[43mis_text\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mis_text\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1225\u001b[0m \u001b[43m    \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mencoding_errors\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mstrict\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1226\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mstorage_options\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1227\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1228\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m   1229\u001b[0m f \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles\u001b[38;5;241m.\u001b[39mhandle\n",
      "File \u001b[0;32m~/.conda/envs/2024-03-04T23.26.17_hghani/lib/python3.10/site-packages/pandas/io/common.py:786\u001b[0m, in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    781\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(handle, \u001b[38;5;28mstr\u001b[39m):\n\u001b[1;32m    782\u001b[0m     \u001b[38;5;66;03m# Check whether the filename is to be opened in binary mode.\u001b[39;00m\n\u001b[1;32m    783\u001b[0m     \u001b[38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.\u001b[39;00m\n\u001b[1;32m    784\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m ioargs\u001b[38;5;241m.\u001b[39mencoding \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m ioargs\u001b[38;5;241m.\u001b[39mmode:\n\u001b[1;32m    785\u001b[0m         \u001b[38;5;66;03m# Encoding\u001b[39;00m\n\u001b[0;32m--> 786\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\n\u001b[1;32m    787\u001b[0m \u001b[43m            \u001b[49m\u001b[43mhandle\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    788\u001b[0m \u001b[43m            \u001b[49m\u001b[43mioargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    789\u001b[0m \u001b[43m            \u001b[49m\u001b[43mencoding\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mioargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mencoding\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    790\u001b[0m \u001b[43m            \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    791\u001b[0m \u001b[43m            \u001b[49m\u001b[43mnewline\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    792\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    793\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    794\u001b[0m         \u001b[38;5;66;03m# Binary mode\u001b[39;00m\n\u001b[1;32m    795\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mopen\u001b[39m(handle, ioargs\u001b[38;5;241m.\u001b[39mmode)\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: './resources/data/regional_reader_metrics.csv'"
     ]
    }
   ],
   "source": [
    "from wikimap import Wikimap\n",
    "import os\n",
    "import pandas as pd\n",
    "import geopandas as gpd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from datetime import date, timedelta\n",
    "from dateutil.relativedelta import relativedelta\n",
    "from math import ceil, floor\n",
    "import shapely\n",
    "from shapely.ops import unary_union\n",
    "import warnings\n",
    "\n",
    "from config import wmf_colors, style_parameters, wmf_regions\n",
    "from data_utils import simple_num_format, split_df_by_col, format_perc, gen_keys, closestdivisible\n",
    "from parameters import author, editing_data_path, readers_data_path, unique_devices_data_path, save_directory, content_gap_data_path\n",
    "\n",
    "def main():\n",
    "    home_dir = '.'\n",
    "\n",
    "    warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "    #---PARAMETERS---\n",
    "    display_flag = True\n",
    "    current_month = date.today().month\n",
    "\n",
    "    #---WMF REGION DATA---\n",
    "    wmf_region_ref = pd.read_csv('resources/data/wmf_region_ref.csv', sep=',')\n",
    "\n",
    "    #---MAP (Borders) AND POPULATION DATA---\n",
    "    raw_map_df = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n",
    "    map_df = raw_map_df[(raw_map_df.name != \"Antarctica\")]\n",
    "    map_df = map_df.merge(wmf_region_ref, how='left', left_on=\"iso_a3\", right_on=\"code\")\n",
    "    map_df = map_df[['name_x', 'iso_a3', 'pop_est', 'gdp_md_est', 'geometry', 'wmf_region']]\n",
    "    map_df = map_df.rename(columns={\"name_x\": \"name\"})\n",
    "    region_table = pd.pivot_table(map_df, values='pop_est', index=['wmf_region'], aggfunc=np.sum)\n",
    "    region_table = region_table.rename(columns={'pop_est': 'sum_pop_est'})\n",
    "    region_table['geometry'] = ''\n",
    "    for region in wmf_regions:\n",
    "        region_df = map_df.loc[map_df['wmf_region'] == region]\n",
    "        region_polys = region_df['geometry'].values.tolist()\n",
    "        region_boundary = gpd.GeoSeries(unary_union(region_polys))\n",
    "        region_table.at[region, 'geometry'] = region_boundary\n",
    "    region_table['centroid'] = region_table['geometry'].apply(lambda g: g.centroid)\n",
    "\n",
    "    #---READER DATA---\n",
    "    reader_df = pd.read_csv(home_dir + '/resources/data/regional_reader_metrics.csv')\n",
    "    reader_df['month'] = pd.to_datetime(reader_df['month'])\n",
    "    reader_df = reader_df.sort_values(by='month')\n",
    "    reader_df = reader_df[~reader_df.region.isin(['UNCLASSED', np.nan])]\n",
    "    reader_df_lastmonth = reader_df.loc[reader_df['month'] == reader_df.iloc[-1]['month']]\n",
    "    region_table = region_table.merge(reader_df_lastmonth, how='left', left_on=\"wmf_region\", right_on=\"region\").set_axis(region_table.index)\n",
    "    region_table = region_table.rename(columns={\"region\": \"region_name\"})\n",
    "    region_table = region_table.drop(columns=['month'])\n",
    "\n",
    "    #---EDITOR DATA---\n",
    "    editor_df = pd.read_csv(home_dir + '/resources/data/regional_editor_metrics.csv')\n",
    "    editor_df = editor_df.rename(columns={\"sum(editors)\": \"monthly_editors\", \"wmf_region\": \"region\"})\n",
    "    editor_df['month'] = pd.to_datetime(editor_df['month'])\n",
    "    editor_df = editor_df.sort_values(by='month')\n",
    "    editor_df = editor_df[~editor_df.region.isin(['UNCLASSED', np.nan])]\n",
    "    editor_df_lastmonth = editor_df.loc[editor_df['month'] == editor_df.iloc[-1]['month']]\n",
    "    region_table = region_table.merge(editor_df_lastmonth, how='left', left_on=\"wmf_region\", right_on=\"region\").set_axis(region_table.index)\n",
    "    region_table = region_table.drop(columns=['month', 'region'])\n",
    "\n",
    "    #---CONTENT DATA---\n",
    "    content_df = pd.read_csv(home_dir + '/resources/data/content_quality.csv')\n",
    "    content_df = content_df.rename(columns={\"time_bucket\": \"month\"})\n",
    "    content_df = content_df.drop(columns=['standard_quality'])\n",
    "    content_df['month'] = pd.to_datetime(content_df['month'])\n",
    "    content_df = content_df.sort_values(by='month')\n",
    "    content_df = content_df[~content_df.region.isin(['UNCLASSED', np.nan])]\n",
    "    content_df_lastmonth = content_df.loc[content_df['month'] == content_df.iloc[-1]['month']]\n",
    "    region_table = region_table.merge(content_df_lastmonth, how='left', left_on=\"wmf_region\", right_on=\"region\").set_axis(region_table.index)\n",
    "    region_table = region_table.drop(columns=['month', 'region'])\n",
    "\n",
    "    #---VALUES---\n",
    "    region_table['pop_label'] = region_table['sum_pop_est'].apply(simple_num_format, round_sigfigs=True)\n",
    "    region_table['ud_label'] = region_table['unique_devices'].apply(simple_num_format, round_sigfigs=True)\n",
    "    region_table['ed_label'] = region_table['monthly_editors'].apply(simple_num_format, round_sigfigs=True)\n",
    "    region_table['sqc_label'] = region_table['standard_quality_count'].apply(simple_num_format, round_sigfigs=True)\n",
    "\n",
    "    #---PERCENT OF TOTAL---\n",
    "    region_table['pop_perc'] = (region_table['sum_pop_est'] / region_table['sum_pop_est'].sum()) * 100\n",
    "    region_table['pop_perc_label'] = region_table[\"pop_perc\"].apply(format_perc, sign=False)\n",
    "    region_table['ud_perc'] = ((region_table['unique_devices'] / region_table['unique_devices'].sum()) * 100)\n",
    "    region_table['ud_perc_label'] = region_table['ud_perc'].apply(format_perc, sign=False)\n",
    "    region_table['ed_perc'] = ((region_table['monthly_editors'] / region_table['monthly_editors'].sum()) * 100)\n",
    "    region_table['ed_perc_label'] = region_table['ed_perc'].apply(format_perc, sign=False)\n",
    "    region_table['sqc_perc'] = ((region_table['standard_quality_count'] / region_table['standard_quality_count'].sum()) * 100)\n",
    "    region_table['sqc_perc_label'] = region_table['sqc_perc'].apply(format_perc, sign=False)\n",
    "\n",
    "    #---CHANGE OVER TIME---\n",
    "    region_table = change_over_time(\"standard_quality_count\", \"sqc_yoy\", content_df, region_table, years_delta=1)\n",
    "\n",
    "    #---YOY of ROLLING AVERAGE---\n",
    "    reader_pivot = pd.pivot_table(reader_df, values='unique_devices', index=['month'], columns=['region'], aggfunc=np.sum)\n",
    "    reader_rolling3mo = reader_pivot.apply(lambda x: x.rolling(window=3).mean()).reset_index()\n",
    "    reader_rolling3mo = pd.melt(reader_rolling3mo, id_vars=\"month\", value_vars=wmf_regions)\n",
    "    editor_pivot = pd.pivot_table(editor_df, values='monthly_editors', index=['month'], columns=['region'], aggfunc=np.sum)\n",
    "    editor_rolling3mo = editor_pivot.apply(lambda x: x.rolling(window=3).mean()).reset_index()\n",
    "    editor_rolling3mo = pd.melt(editor_rolling3mo, id_vars=\"month\", value_vars=wmf_regions)\n",
    "    region_table = change_over_time(\"value\", \"ud_3morolling_yoy\", reader_rolling3mo, region_table, years_delta=3)\n",
    "    region_table = change_over_time(\"value\", \"ed_3morolling_yoy\", editor_rolling3mo, region_table, years_delta=1)\n",
    "\n",
    "    #---REMERGE W MAP_DF---\n",
    "    map_df = map_df.merge(region_table.drop(columns=['geometry', 'centroid']), how='left', left_on=\"wmf_region\", right_on=\"wmf_region\")\n",
    "\n",
    "\n",
    "    #---ADDITIONAL LABELS---\n",
    "    #manually adjust positions (very complicated to do programmatically in matplotlib and not necessary)\n",
    "    region_table[\"region_label_positions\"] = region_table['centroid']\n",
    "    mena = region_table.at['Middle East & North Africa','centroid']\n",
    "    region_table.at['Middle East & North Africa','centroid'] = shapely.Point(mena.x,mena.y + 8)\n",
    "    nwe = region_table.at['Northern & Western Europe','centroid']\n",
    "    region_table.at['Northern & Western Europe','centroid'] = shapely.Point(nwe.x,nwe.y + 5)\n",
    "\n",
    "\n",
    "    #---MAKE CHART---\n",
    "    #---BLANK MAP WITH REGIONS LABELS---\n",
    "    chart = Wikimap(map_df, fignum=0, title = 'WMF Regions', data_source=\"geopandas\", month=current_month, display_month=False)\n",
    "    chart.plot_regions(region_table, 'region_name', fontsize=10)\n",
    "    chart.format_map(format_colobar=False)\n",
    "    save_file_name = \"Map_RegionNames.png\"\n",
    "    chart.finalize_plot(save_file_name,display=True)\n",
    "\n",
    "    #---WORLD POPULATION---\n",
    "    chart = Wikimap(map_df, fignum=1, title = 'World Population', data_source=\"geopandas\", month=current_month)\n",
    "    chart.plot_wcolorbar(col = 'sum_pop_est')\n",
    "    chart.plot_regions(region_table, 'pop_label')\n",
    "    chart.format_map()\n",
    "    save_file_name = \"Map_WorldPop.png\"\n",
    "    chart.finalize_plot(save_file_name,display=True)\n",
    "\n",
    "    #---WORLD POPULATION - PERCENT---\n",
    "    chart = Wikimap(map_df, fignum=2, title = 'World Population - Percent of Total', data_source=\"geopandas\", month=current_month)\n",
    "    chart.plot_wcolorbar(col = 'pop_perc')\n",
    "    chart.plot_regions(region_table,'pop_perc_label')\n",
    "    chart.format_map(cbar_perc=True)\n",
    "    save_file_name = \"Map_WorldPopPerc.png\"\n",
    "    chart.finalize_plot(save_file_name,display=True)\n",
    "\n",
    "    #---READER METRICS - UNIQUE DEVICES---\n",
    "    chart = Wikimap(map_df, fignum=3, title = 'Unique Devices', data_source=\"geopandas\", month=reader_lastmonth)\n",
    "    chart.plot_wcolorbar(col = 'unique_devices')\n",
    "    chart.plot_regions(region_table, 'ud_label')\n",
    "    chart.format_map()\n",
    "    save_file_name = \"Map_UniqueDevices.png\"\n",
    "    chart.finalize_plot(save_file_name,display=True)\n",
    "\n",
    "    #---READER METRICS - UNIQUE DEVICES PERCENT---\n",
    "    chart = Wikimap(map_df, fignum=4, title = 'Unique Devices - Percent of Total', data_source=\"geopandas\", month=reader_lastmonth)\n",
    "    chart.plot_wcolorbar(col = 'ud_perc')\n",
    "    chart.plot_regions(region_table,'ud_perc_label')\n",
    "    chart.format_map(cbar_perc=True)\n",
    "    save_file_name = \"Map_UniqueDevicesPerc.png\"\n",
    "    chart.finalize_plot(save_file_name,display=True)\n",
    "\n",
    "    #---READER METRICS - UNIQUE DEVICES YOY of 3MO ROLLING Average---\n",
    "    chart = Wikimap(map_df, fignum=6, title = 'Unique Devices - Three Year Change of 3 Month Rolling Average', data_source=\"geopandas\", month=reader_lastmonth)\n",
    "    chart.plot_wcolorbar(col = 'ud_3morolling_yoy', setlimits=True)\n",
    "    chart.plot_regions(region_table,'ud_3morolling_yoy_label')\n",
    "    chart.format_map(cbar_perc=True)\n",
    "    save_file_name = \"Map_UniqueDevices3moRollingYoy.png\"\n",
    "    chart.finalize_plot(save_file_name,display=True)\n",
    "\n",
    "    #---EDITOR METRICS - ACTIVE MONTHLY EDITORS---\n",
    "    chart = Wikimap(map_df, fignum=7, title = 'Active Monthly Editors', data_source=\"geopandas\", month=editor_lastmonth)\n",
    "    chart.plot_wcolorbar(col = 'monthly_editors')\n",
    "    chart.plot_regions(region_table, 'ed_label')\n",
    "    chart.format_map()\n",
    "    save_file_name = \"Map_Editors.png\"\n",
    "    chart.finalize_plot(save_file_name,display=True)\n",
    "\n",
    "    #---EDITOR METRICS - ACTIVE MONTHLY EDITORS PERC---\n",
    "    chart = Wikimap(map_df, fignum=8, title = 'Active Monthly Editors - Percent of Total', data_source=\"geopandas\", month=editor_lastmonth)\n",
    "    chart.plot_wcolorbar(col = 'ed_perc')\n",
    "    chart.plot_regions(region_table, 'ed_perc_label')\n",
    "    chart.format_map(cbar_perc=True)\n",
    "    save_file_name = \"Map_EditorsPerc.png\"\n",
    "    chart.finalize_plot(save_file_name,display=True)\n",
    "\n",
    "    #---EDITOR METRICS - EDITORS YOY of 3MO ROLLING Average---\n",
    "    chart = Wikimap(map_df, fignum=6, title = 'Active Monthly Editors - YoY Change of 3 Month Rolling Average', data_source=\"geopandas\", month=editor_lastmonth)\n",
    "    chart.plot_wcolorbar(col = 'ed_3morolling_yoy', setlimits=True)\n",
    "    chart.plot_regions(region_table,'ed_3morolling_yoy_label')\n",
    "    chart.format_map(cbar_perc=True)\n",
    "    save_file_name = \"Map_Editors3moRollingYoy.png\"\n",
    "    chart.finalize_plot(save_file_name,display=True)\n",
    "\n",
    "    #---CONTENT METRICS - COUNT---\n",
    "    chart = Wikimap(map_df, fignum=10, title = 'Quality Articles 2022', data_source=\"geopandas\", month=content_lastmonth)\n",
    "    chart.plot_wcolorbar(col = 'standard_quality_count_22', setlimits=True, custom_vmin=0, custom_vmax=600000)\n",
    "    chart.plot_regions(region_table,'sqc_label_22')\n",
    "    chart.format_map()\n",
    "    save_file_name = \"Map_Content22.png\"\n",
    "    chart.finalize_plot(save_file_name,display=True)\n",
    "\n",
    "    #---CONTENT METRICS - COUNT---\n",
    "    chart = Wikimap(map_df, fignum=10, title = 'Quality Articles 2023', data_source=\"geopandas\", month=content_lastmonth)\n",
    "    chart.plot_wcolorbar(col = 'standard_quality_count', setlimits=True, custom_vmin=0, custom_vmax=600000)\n",
    "    chart.plot_regions(region_table,'sqc_label')\n",
    "    chart.format_map()\n",
    "    save_file_name = \"Map_Content23.png\"\n",
    "    chart.finalize_plot(save_file_name,display=True)\n",
    "\n",
    "    #---CONTENT METRICS - PERCENT TOTAL 2022---\n",
    "    chart = Wikimap(map_df, fignum=11, title = 'Quality Articles - Percent of Total 2022', data_source=\"geopandas\", month=content_lastmonth)\n",
    "    chart.plot_wcolorbar(col = 'sqc_perc_22', setlimits=True, custom_vmin=0, custom_vmax=50)\n",
    "    chart.plot_regions(region_table,'sqc_perc_22_label')\n",
    "    chart.format_map(cbar_perc=True)\n",
    "    save_file_name = \"Map_ContentPerc22.png\"\n",
    "    chart.finalize_plot(save_file_name,display=True)\n",
    "\n",
    "    #---CONTENT METRICS - PERCENT TOTAL 2023---\n",
    "    chart = Wikimap(map_df, fignum=12, title = 'Quality Articles - Percent of Total 2023', data_source=\"geopandas\", month=content_lastmonth)\n",
    "    chart.plot_wcolorbar(col = 'sqc_perc', setlimits=True, custom_vmin=0, custom_vmax=50)\n",
    "    chart.plot_regions(region_table,'sqc_perc_label')\n",
    "    chart.format_map(cbar_perc=True)\n",
    "    save_file_name = \"Map_ContentPerc23.png\"\n",
    "    chart.finalize_plot(save_file_name,display=True)\n",
    "\n",
    "\n",
    "    #---CONTENT METRICS - YOY of 3MO ROLLING Average---\n",
    "    chart = Wikimap(map_df, fignum=13, title = 'Quality Articles - YoY', data_source=\"geopandas\", month=content_lastmonth)\n",
    "    chart.plot_wcolorbar(col = 'sqc_yoy', setlimits=True)\n",
    "    chart.plot_regions(region_table, 'sqc_yoy_label')\n",
    "    chart.format_map(cbar_perc=True)\n",
    "    save_file_name = \"Map_ContentYoY.png\"\n",
    "    chart.finalize_plot(save_file_name,display=True)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd4b0e2a-0eca-4804-9d1c-791dcb9cefb1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
